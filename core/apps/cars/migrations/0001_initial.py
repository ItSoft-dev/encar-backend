# Generated by Django 5.2 on 2025-08-14 17:27

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BodyType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Тип кузова',
                'verbose_name_plural': 'Тип кузова',
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='brand/icons/')),
            ],
            options={
                'verbose_name': 'бренд',
                'verbose_name_plural': 'бренды',
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'цвет',
                'verbose_name_plural': 'цвет',
            },
        ),
        migrations.CreateModel(
            name='FuelType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'тип топлива',
                'verbose_name_plural': 'тип топлива',
            },
        ),
        migrations.CreateModel(
            name='Generation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'поколение',
                'verbose_name_plural': 'поколение',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name': 'страна',
                'verbose_name_plural': 'страны',
            },
        ),
        migrations.CreateModel(
            name='Transmission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Трансмиссия',
                'verbose_name_plural': 'Трансмиссии',
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('price', models.PositiveBigIntegerField()),
                ('year', models.CharField(max_length=4, null=True)),
                ('month', models.CharField(max_length=2, null=True)),
                ('engine_capacity', models.PositiveIntegerField()),
                ('miliage', models.PositiveBigIntegerField()),
                ('name', models.CharField(max_length=200)),
                ('is_sold', models.BooleanField(default=False)),
                ('body_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to='cars.bodytype')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to='cars.brand')),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to='cars.color')),
                ('fuel_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to='cars.fueltype')),
                ('generation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to='cars.generation')),
            ],
            options={
                'verbose_name': 'автомобил',
                'verbose_name_plural': 'автомобили',
            },
        ),
        migrations.CreateModel(
            name='CarInspection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inspection_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата инспекции')),
                ('diagnosis_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата диагностики')),
                ('vin', models.CharField(blank=True, max_length=100, null=True, verbose_name='VIN')),
                ('engine_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип мотора')),
                ('incidents', models.CharField(blank=True, max_length=255, null=True, verbose_name='Инциденты')),
                ('year', models.CharField(blank=True, max_length=10, null=True, verbose_name='Год модели')),
                ('usage_type', models.CharField(blank=True, max_length=255, null=True, verbose_name='Тип использования')),
                ('front_left_door', models.CharField(blank=True, max_length=50, null=True, verbose_name='Передняя левая дверь')),
                ('front_right_door', models.CharField(blank=True, max_length=50, null=True, verbose_name='Передняя правая дверь')),
                ('rear_left_door', models.CharField(blank=True, max_length=50, null=True, verbose_name='Задняя левая дверь')),
                ('rear_right_door', models.CharField(blank=True, max_length=50, null=True, verbose_name='Задняя правая дверь')),
                ('hood', models.CharField(blank=True, max_length=50, null=True, verbose_name='Капот')),
                ('trunk', models.CharField(blank=True, max_length=50, null=True, verbose_name='Крышка багажника')),
                ('car', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='car_inspections', to='cars.car')),
            ],
            options={
                'verbose_name': 'Проверка авто',
                'verbose_name_plural': 'Проверка авто',
            },
        ),
        migrations.CreateModel(
            name='CarInspectionIncident',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='car_incidents', to='cars.carinspection')),
            ],
            options={
                'verbose_name': 'Страховые случаи',
                'verbose_name_plural': 'Страховые случаи',
            },
        ),
        migrations.CreateModel(
            name='CarInteryer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('side_airbag', models.BooleanField(default=False, verbose_name='Боковая подушка безопасности')),
                ('curtain_airbag', models.BooleanField(default=False, verbose_name='Шторка безопасности')),
                ('abs', models.BooleanField(default=False, verbose_name='Система антиблокировки тормозов (ABS)')),
                ('traction_control', models.BooleanField(default=False, verbose_name='Система контроля тяги (TCS)')),
                ('esc', models.BooleanField(default=False, verbose_name='Система электронной стабилизации (ESC)')),
                ('tpms', models.BooleanField(default=False, verbose_name='Система контроля давления в шинах (TPMS)')),
                ('ldws', models.BooleanField(default=False, verbose_name='Система предупреждения о выходе из полосы (LDWS)')),
                ('rear_view_camera', models.BooleanField(default=False, verbose_name='Камера заднего вида')),
                ('car', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='car_interyer', to='cars.car')),
            ],
            options={
                'verbose_name': 'Экстерьер/Интерьер',
                'verbose_name_plural': 'Экстерьер/Интерьер',
            },
        ),
        migrations.CreateModel(
            name='CarMedia',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('media', models.ImageField(upload_to='car/media/')),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='car_medias', to='cars.car')),
            ],
            options={
                'verbose_name': 'изображение автомобиля',
                'verbose_name_plural': 'изображения автомобилей',
            },
        ),
        migrations.CreateModel(
            name='CarMultimedia',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cruise_control', models.BooleanField(default=False, verbose_name='Круиз-контроль (обычный/адаптивный)')),
                ('leather_seats', models.BooleanField(default=False, verbose_name='Кожаные сиденья')),
                ('seat_electric_adjustment_front', models.BooleanField(default=False, verbose_name='Электрорегулировка сидений (водитель/пассажир)')),
                ('seat_electric_adjustment_rear', models.BooleanField(default=False, verbose_name='Электрорегулировка сидений (задний ряд)')),
                ('seat_heating_front_rear', models.BooleanField(default=False, verbose_name='Подогрев сидений (передних/задних)')),
                ('seat_memory_front', models.BooleanField(default=False, verbose_name='Память сидений (водитель/пассажир)')),
                ('seat_ventilation_front', models.BooleanField(default=False, verbose_name='Вентилируемые сиденья (водитель/пассажир)')),
                ('seat_ventilation_rear', models.BooleanField(default=False, verbose_name='Вентилируемые сиденья (задний ряд)')),
                ('massage_seats', models.BooleanField(default=False, verbose_name='Массажные сиденья')),
                ('abs_system', models.BooleanField(default=False, verbose_name='Система антиблокировки тормозов (ABS)')),
                ('rear_av_monitor', models.BooleanField(default=False, verbose_name='AV-монитор задних сидений')),
                ('cd_player', models.BooleanField(default=False, verbose_name='CD-плеер')),
                ('usb_port', models.BooleanField(default=False, verbose_name='USB-порт')),
                ('aux_port', models.BooleanField(default=False, verbose_name='AUX-порт')),
                ('car', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='car_multimedia', to='cars.car')),
            ],
            options={
                'verbose_name': 'Удобство / Мультимедиа',
                'verbose_name_plural': 'Удобство / Мультимедиа',
            },
        ),
        migrations.CreateModel(
            name='CarPricing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agent_service', models.PositiveBigIntegerField(verbose_name='Услуги агента')),
                ('car_cost', models.PositiveBigIntegerField(verbose_name='Стоимость авто')),
                ('expences_in_korea', models.PositiveBigIntegerField(verbose_name='расходы в Корее')),
                ('custom_dutie', models.PositiveBigIntegerField(verbose_name='Таможенные платежи')),
                ('utilsbor', models.PositiveBigIntegerField(verbose_name='Утильсбор')),
                ('custom_broker', models.PositiveBigIntegerField(verbose_name='Таможенный брокер')),
                ('car_transporter', models.PositiveBigIntegerField(verbose_name='Автовоз')),
                ('car', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='car_pricing', to='cars.car')),
            ],
            options={
                'verbose_name': 'расчет цены',
                'verbose_name_plural': 'расчет цены',
            },
        ),
        migrations.CreateModel(
            name='CarSafety',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('epb', models.BooleanField(default=False, verbose_name='Электронный стояночный тормоз (EPB)')),
                ('automatic_ac', models.BooleanField(default=False, verbose_name='Автоматический кондиционер')),
                ('smart_key', models.BooleanField(default=False, verbose_name='Умный ключ')),
                ('wireless_door_lock', models.BooleanField(default=False, verbose_name='Беспроводной замок двери')),
                ('rain_sensor', models.BooleanField(default=False, verbose_name='Датчик дождя')),
                ('auto_light', models.BooleanField(default=False, verbose_name='Автоматический свет')),
                ('navigation', models.BooleanField(default=False, verbose_name='Навигация')),
                ('bluetooth', models.BooleanField(default=False, verbose_name='Bluetooth')),
                ('usb_port', models.BooleanField(default=False, verbose_name='USB-порт')),
                ('car', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='car_safety', to='cars.car')),
            ],
            options={
                'verbose_name': 'Безопасность',
                'verbose_name_plural': 'Безопасность',
            },
        ),
        migrations.CreateModel(
            name='CarSeats',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('seat_leather', models.BooleanField(default=False, verbose_name='Кожаные сиденья')),
                ('seat_electric_adjustment_driver_passenger', models.BooleanField(default=False, verbose_name='Электрорегулировка сидений (водитель/пассажир)')),
                ('seat_electric_adjustment_rear_seats', models.BooleanField(default=False, verbose_name='Электрорегулировка сидений (задний ряд)')),
                ('seat_heating_all', models.BooleanField(default=False, verbose_name='Подогрев сидений (передних/задних)')),
                ('seat_memory_all', models.BooleanField(default=False, verbose_name='Память сидений (водитель/пассажир)')),
                ('seat_ventilation_driver_passenger', models.BooleanField(default=False, verbose_name='Вентилируемые сиденья (водитель/пассажир)')),
                ('seat_ventilation_back', models.BooleanField(default=False, verbose_name='Вентилируемые сиденья (задний ряд)')),
                ('seat_massage', models.BooleanField(default=False, verbose_name='Массажные сиденья')),
                ('car', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='car_seats', to='cars.car')),
            ],
            options={
                'verbose_name': 'Сиденья',
                'verbose_name_plural': 'Сиденья',
            },
        ),
        migrations.CreateModel(
            name='Comparison',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cars', models.ManyToManyField(related_name='comparisons', to='cars.car')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparisons', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Сравнение',
                'verbose_name_plural': 'Сравнения',
            },
        ),
        migrations.CreateModel(
            name='InspectionSection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='cars.carinspection')),
            ],
            options={
                'verbose_name': 'Внутренняя инспекция',
                'verbose_name_plural': 'Внутренняя инспекция',
            },
        ),
        migrations.CreateModel(
            name='InspectionField',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('status', models.CharField(max_length=255)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='cars.inspectionsection')),
            ],
            options={
                'verbose_name': 'Внутренняя инспекция',
                'verbose_name_plural': 'Внутренняя инспекция',
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='models', to='cars.brand')),
            ],
            options={
                'verbose_name': 'модель',
                'verbose_name_plural': 'модели',
            },
        ),
        migrations.AddField(
            model_name='generation',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generations', to='cars.model'),
        ),
        migrations.AddField(
            model_name='car',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to='cars.model'),
        ),
        migrations.AddField(
            model_name='car',
            name='region',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cars', to='cars.region'),
        ),
        migrations.AddField(
            model_name='car',
            name='transmission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to='cars.transmission'),
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='cars.car')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Лайк',
                'verbose_name_plural': 'Лайки',
                'unique_together': {('user', 'car')},
            },
        ),
    ]
